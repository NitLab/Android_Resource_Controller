/* Copyright (c) 2013 NITLab, University of Thessaly, Greece
 * This software may be used and distributed solely under the terms of the MIT license (License).
 * You should find a copy of the License in LICENSE.TXT or at http://opensource.org/licenses/MIT.
 * By downloading or using this software you accept the terms and the liability disclaimer in the License.
*/

package com.omf.resourcecontroller.OMF;

import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smackx.pubsub.LeafNode;
import org.jivesoftware.smackx.pubsub.Node;
import org.jivesoftware.smackx.pubsub.PayloadItem;
import org.jivesoftware.smackx.pubsub.SimplePayload;

import android.util.Log;

import com.omf.resourcecontroller.Constants;

public class MessagePublisher implements Constants{

	public static final String appTAG = "com.omf.resourcecontroller";
	public static final String classTAG = "MessagePublisher";
	public String connectionType;
	
	public MessagePublisher(String connType){
		
		this.connectionType = connType;
		
	}
	
	/**
	 * Publish item
	 * @param xmlString : The XML string generated by the XMLGenerator
	 * @param SCHEMA : The OMF Schema
	 * @param mType : the OMF message type
	 * @param pubNode : the node for the message to be published
	 */
	public void PublishItem(OMFMessage omfMessage, String mtype, Node pubNode)
	{
		
		//Node pubNode is for the aSmack only currently, i dont know whether AMQP will work that way.
		if (connectionType.equalsIgnoreCase("XMPP"))
		{
			XMPPPublisher(omfMessage.toXML(), SCHEMA, mtype, pubNode);
		}
		else if (connectionType.equalsIgnoreCase("AMQP"))
		{
			//TODO AMQP publisher
		}
			
	}
	
	
	private void XMPPPublisher(String xmlString, String SCHEMA, String mtype, Node pubNode){
		
		SimplePayload payload = new SimplePayload(mtype,SCHEMA, xmlString);

		@SuppressWarnings({ "unchecked", "rawtypes" })
		PayloadItem payloadItem = new PayloadItem(null, payload);
		
		Log.i(appTAG, classTAG+": Message Published to:"+pubNode.getId());
		
		try {
			((LeafNode)pubNode).publish(payloadItem);
		} catch (NotConnectedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	//private void AMQPPublisher(){
	////TODO
	//}
}
